dotnet add package Microsoft.AspNetCore.Mvc -v=1.1
dotnet add package Microsoft.AspNetCore.StaticFiles -v=1.1
dotnet add package Microsoft.AspNetCore.Session -v=1.1
using Newtonsoft.Json;

Hiding Data
dotnet add package Microsoft.Extensions.Options.ConfigurationExtensions -v=1.1
Startup.cs =>
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Hosting;

Server:

dotnet add package MySql.Data -v 7.0.7-*
dotnet add package System.Data.SqlClient -v 4.1.0-*

In Controller: using Microsoft.AspNetCore.Http;
In Startup: 
=> ConfigureServices
services.AddSession();
services.AddMvc();
=> Configure
app.UseSession();
app.UseMvc();
=> Using Session
HttpContext.Session.SetString("KeyName", "Value");
string sessionStr = HttpContext.Session.GetString("KeyName");

HttpContext.Session.SetInt32("KeyName", Int);
int? sessionInt = HttpContext.Session.GetInt32("KeyName");

ENTITY FRAMEWORK CORE:
For...
dotnet add package MySql.Data.EntityFrameworkCore -v 7.0.7-*


JSON:
session.SetString(key, JsonConvert.SerializeObject(value);
string jsonValue = session.GetString(key)
JsonConvert.DeserializeObject<T>(value);

csproj
<DotNetCliToolReference Include="Microsoft.DotNet.Watcher.Tools" Version="1.0.0" />

Put this in your project for JSON

using Newtonsoft.Json;
 
EXTENSIONS 

//Data to Json
public static class SessionExtensions
{
    // We can call ".SetObjectAsJson" just like our other session set methods, by passing a key and a value
    public static void SetObjectAsJson(this ISession session, string key, object value)
    {
        // This helper function simply serializes theobject to JSON and stores it as a string in session
        session.SetString(key, JsonConvert.SerializeObject(value));
    }
       
    // generic type T is a stand-in indicating that we need to specify the type on retrieval
    public static T GetObjectFromJson<T>(this ISession session, string key)
    {
        string value = session.GetString(key);
        // Upon retrieval the object is deserialized based on the type we specified
        return value == null ? default(T) : JsonConvert.DeserializeObject<T>(value);
    }
}

//Json to DataSet for working with LINQ
public static DataTable ToDataTable<T>(this IList<T> data)
{
    PropertyDescriptorCollection props =
    TypeDescriptor.GetProperties(typeof(T));
    DataTable table = new DataTable();
    for(int i = 0 ; i < props.Count ; i++)
    {
    PropertyDescriptor prop = props[i];
    table.Columns.Add(prop.Name, prop.PropertyType);
    }
    object[] values = new object[props.Count];
    foreach (T item in data)
    {
    for (int i = 0; i < values.Length; i++)
    {
        values[i] = props[i].GetValue(item);
    }
    table.Rows.Add(values);
    }
    return table;        
}
